<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.myron.demo</groupId>
	<artifactId>demo-swagger2</artifactId>
	<version>1.0.0-SNAPSHOT</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- aop -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- 构建Restful API -->
		<!-- swagger2 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox-swagger2.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- swagger2 UI -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox-swagger2.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- 扩展 生成swagger静态文件支持 -->
		<!-- Swagger2Markup是Github上的一个开源项目。该项目主要用来将Swagger自动生成的文档转换成几种流行的格式以便于静态部署和使用， 
			比如：AsciiDoc、Markdown、Confluence。 -->
		<!-- Swagger => AsciiDoc的源文件 -->
		<dependency>
			<groupId>io.github.swagger2markup</groupId>
			<artifactId>swagger2markup</artifactId>
			<version>${swagger2markup.version}</version>
		</dependency>

		<!--使用Java代码生成html-->
		<dependency>
			<groupId>org.asciidoctor</groupId>
			<artifactId>asciidoctorj</artifactId>
			<version>1.5.6</version>
		</dependency>
		<!--使用Java代码生成pdf  中文会丢失体验不好不用
		<dependency>
			<groupId>org.asciidoctor</groupId>
			<artifactId>asciidoctorj-pdf</artifactId>
			<version>1.5.0-alpha.16</version>
		</dependency>
		-->

		<!-- 工具类需要jar包 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>
	</dependencies>

	<properties>
		<java.version>1.8</java.version>
		<rpm.install.path>/usr/soft/app</rpm.install.path>
		<rpm.prefix>/usr/soft/app</rpm.prefix>
		<springfox-swagger2.version>2.7.0</springfox-swagger2.version>
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<swagger2markup.version>1.3.1</swagger2markup.version>
	</properties>


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- AsciiDoc转换成可部署的HTML -->
			<!-- 执行 asciidoctor:process-asciidoc -->
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>1.5.6</version>
				<configuration>
					<sourceDirectory>src/docs/asciidoc/generated</sourceDirectory>
					<outputDirectory>src/docs/asciidoc/html</outputDirectory>
					<backend>html</backend>
					<sourceHighlighter>coderay</sourceHighlighter>
					<attributes>
						<toc>left</toc>
					</attributes>
				</configuration>
			</plugin>

			<!-- 打包RPM包: mvn package -Dmaven.test.skip=true   -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>rpm-maven-plugin</artifactId>
				<version>2.1.5</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<goals>
							<goal>rpm</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<prefix>${rpm.prefix}</prefix><!-- tomcat目录  -->
					<license>2018, wwww.myron.com</license>
					<distribution>myron</distribution>
					<group>myron.com</group>
					<packager>linrx</packager>
					<version>${project.version}</version>
					<autoRequires>true</autoRequires>
					<release>3</release>
					<requires>
						<require>java-1.7.0 >= 1.7</require>
					</requires>
					<mappings>
						<mapping>
							<!-- 安装rpm后指向的服务器安装目录  -->
							<directory>${rpm.install.path}/${project.artifactId}</directory>
							<filemode>755</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>target/${project.artifactId}-${project.version}.jar</location>
								</source>
							</sources>
						</mapping>
						<!-- 复制安装相关脚本命令-->
						<mapping>
							<directory>${rpm.install.path}/${project.artifactId}/bin</directory>
							<filemode>750</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>src/bin</location>
								</source>
							</sources>
						</mapping>

						<!--配置软连接起停项目,相当于命令:ln -sf myapp.jar /etc/init.d/myapp)
							启动: systemctl start myapp
							停止: systemctl stop myapp
							重启: systemctl restart myapp
							查看日志: journalctl -u myapp-->
						<mapping>
							<directory>/etc/init.d</directory>
							<filemode>750</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<softlinkSource>
									<location>${rpm.install.path}/${project.artifactId}/${project.artifactId}-${project.version}.jar</location>
									<destination>${project.artifactId}</destination>
								</softlinkSource>
							</sources>
						</mapping>
					</mappings>
					<preinstallScriptlet>
						<script>echo "installing ${project.name} now"</script>
					</preinstallScriptlet>
					<postinstallScriptlet>
						<!-- 通过软链接 配置"service demo-swagger2 " 相关操作命令启动-->
						<!-- 使用上面softlinkSource配置替代
						<script>
							rm -f /etc/init.d/${project.artifactId};
							ln -sf ${rpm.install.path}/${project.artifactId}/bin/startup.sh /etc/init.d/demo-swagger2;
						</script>
						-->
					</postinstallScriptlet>
					<preremoveScriptlet>
						<script>
							<!--rm -f /etc/init.d/${project.artifactId};-->
							echo "uninstalling ${project.name} success";
						</script>
						<!--
						<scriptFile>src/main/scripts/preremove</scriptFile>
						<fileEncoding>utf-8</fileEncoding>
						-->
					</preremoveScriptlet>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-releases</id>
			<url>https://repo.spring.io/libs-release</url>
		</repository>
		
		
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-releases</id>
			<url>https://repo.spring.io/libs-release</url>
		</pluginRepository>
	</pluginRepositories>
</project>